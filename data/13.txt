DICON: Interactive Visual Analysis of Multidimensional ClustersNan Cao, David Gotz, Jimeng Sun and Huamin Qu, Member, IEEEFig. 1. DICON is a dynamic icon-based visualization technique that helps users understand, evaluate, and adjust complex multidi- mensional clusters. It provides visual cues describing the quality of a cluster as well as its multiple attributes, and can be embedded within many kinds of visualizations such as maps, scatter plots, and graphs.Abstract—Clustering as a fundamental data analysis technique has been widely used in many analytic applications.  However, it is often difﬁcult for users to understand and evaluate multidimensional clustering results, especially the quality of clusters and their semantics. For large and complex data, high-level statistical information about the clusters is often needed for users to evaluate cluster quality while a detailed display of multidimensional attributes of the data is necessary to understand the meaning of clusters. In this paper, we introduce DICON, an icon-based cluster visualization that embeds statistical information into a multi-attribute display to facilitate cluster interpretation, evaluation, and comparison. We design a treemap-like icon to represent a multidimensional cluster, and the quality of the cluster can be conveniently evaluated with the embedded statistical information. We further develop a novel layout algorithm which can generate similar icons for similar clusters, making comparisons of clusters easier. User interaction and clutter reduction are integrated into the system to help users more effectively analyze and reﬁne clustering results for large datasets. We demonstrate the power of DICON through a user study and a case study in the healthcare domain. Our evaluation shows the beneﬁts of the technique, especially in support of complex multidimensional cluster analysis.Index Terms—Visual Analysis, Clustering, Information Visualization.		
1    INTRODUCTIONClustering is a widely used method to group data entities into sub- sets called clusters such that the entities in each cluster are similar in some way. A powerful feature of clustering algorithms is that they can generate clusters without any pre-deﬁned labels or categories, which makes them an ideal choice for analyzing data with little or no a priori information. Unlike classiﬁcation in which categories with clear se- mantics are pre-deﬁned, clustering by deﬁnition works without these initial constraints on how data entities should be grouped. Users are only required to choose a distance function (e.g., Euclidean distance) that measures how similar two data items are in a feature space, and some other parameters such as the number of clusters or a maximum cluster diameter. Clustering algorithms will then automatically parti- tion data. While this technique is powerful, users often have difﬁculty understanding the semantic of the resulting clusters and evaluating the quality of the results, especially for multidimensional data.  There are several issues which make understanding and evaluating clustering results difﬁcult. First, for multidimensional data, the enti- ties that are grouped together are close in a multidimensional feature space. However, their similarity may be mainly because of their close-• Nan Cao and Huamin Qu are with the Department of Computer Science and Engineering at the Hong Kong University of Science and Technology. E-mail: {nancao, huamin}@cse.ust.hk• David Gotz and Jimeng Sun are with IBM T.J. Watson Research Center. E-mail: {dgotz, jimeng}@us.ibm.comManuscript received 31 March 2011; accepted 1 August 2011; posted online23 October 2011; mailed on 14 October 2011.For information on obtaining reprints of this article, please send email to: tvcg@computer.org.
ness on a subset of dimensions instead of all dimensions. Understand- ing these abstract relationships can be challenging. Moreover, a cluster may contain several different subclusters which have different mean- ings for users. This subcluster structure is usually hard to detect. Sec- ond, as unsupervised learning processes using no semantic knowledge or pre-deﬁned categories, clustering algorithms often require users to input some parameters in advance. For example, users must provide the number of clusters (i.e., k) for the well known K-means algorithm. However, it challenging to select a proper k value for the underlying data. Therefore, algorithms like K-means might group together en- tities that are semantically different (when k is smaller than the real number of clusters) or separate entities that are semantically similar (when k is larger than the real number of clusters). Thus, users need some way to evaluate and reﬁne the clustering results.  Information visualization can be of great value in addressing these issues. For example, techniques such as scatter plot matrices [10], parallel coordinates [18], and RadViz [25] have been used to visually explain the results of clustering algorithms. Some algorithms focus on revealing the multi-attribute values of clusters to help users understand the semantic of clusters while others provide visual cues for the cluster quality. However, none of them offer a complete solution for cluster interpretation, evaluation, and reﬁnement. We need a visualization which allows users to understand the meaning of various clusters, e- valuate their qualities, compare different clusters, and reﬁne clustering results as necessary. In addition, given the wide range of applications of clustering, we want a visualization that can be conveniently embed- ded into various visual displays or presentations.  In this paper, we propose DICON1, a dynamic icon-based visualiza- tion technique that helps users understand, evaluate, and adjust com-1Website:     http://www.cse.ust.hk/∼nancao/multidim.html
1077-2626/11/$26.00 © 2011 IEEE	Published by the IEEE Computer Society

plex multidimensional clustering results. DICON encodes the raw da- ta values in multiple dimensions as well as the statistical information related to cluster quality. It adopts an icon design which can be con- veniently embedded into a wide range of presentations. Moreover, it supports intuitive user interactions for cluster reﬁnement. The major contributions of this paper are as follows:• A multidimensional cluster icon design that encodes multiple da- ta attributes as well as derived statistical information for cluster interpretation and quality evaluation.• A stabilized icon layout algorithm that generates similar icons for similar clusters for cluster comparison.• Intuitive user interactions to support cluster reﬁnement via direct manipulation of icons.2 RELATED  WORKThis section provides an overview of related work. We focus on tech- niques most relevant to DICON, including treemap visualization, visu- alization of multidimensional clusters, icon-based multivariate visual- ization, and interactive cluster exploration and analysis. More general surveys can be found in [21, 23].2.1 TreemapsThe Treemap [19,31] is one of the most well known techniques for vi- sualizing hierarchical information. Many algorithms [2, 3, 32, 37] have been proposed to lay out treemaps according to different optimiza- tion criteria. The design of DICON is inspired by these techniques. However, when compared with traditional treemaps, DICON has the following signiﬁcant differences. First, DICON introduces a novel en- coding method which targets on the visualization of multidimensional clusters and associated statistical measures rather than hierarchial in- formation. Second, a stabilized layout algorithm is proposed to gen- erate similar cluster icons according to cluster similarities. Finally, several new interactions are designed to facilitate interactive cluster reﬁnement and manipulation.2.2 Visualizing Multidimensional ClustersParallel coordinate plots (PCPs), introduced by Inselberg [18], are widely used for multidimensional data. Many researchers have fo- cused on ﬁnding innate cluster patterns over multiple dimensions. For example, Fua et al. [12] used hierarchical clustering and proposed a variation on PCPs to convey aggregate information for the resulting clusters. Novotny [26] represented each cluster as a polygonal area and used both opacity values and textures to distinguish different clus- ters. Zhou et al. [40] introduced visual clustering to reduce edge clutter in PCPs. Many other clutter reduction and pattern enhancement meth- ods have been proposed including dimension reordering [1, 34] and smooth, bundled curves [39].  However, as studied by Holten et al. [17], PCPs have a limited ca- pability when visualizing multiple clusters. If the number of clusters is over ﬁve, a rather small number, user performance in cluster identiﬁca- tion tasks decreases dramatically. As shown in our user study, DICON overcomes this limitation and enables effective cluster identiﬁcation for much larger numbers of clusters.  The scatter plot is another well known visualization technique. It is simple in design, very familiar to users due to its long history, and has a high degree of visual clarity [35]. Typical scatter plots depict data distributions across two dimensions. For multidimensional data, scatter plot matrices can be used. Scatter plot matrices [4] represent all pairwise combinations of dimensions to provide an overview of an en- tire dataset. However, ﬁnding multidimensional clusters using a scatter plot matrix is tedious and time consuming. Some dimension reduction methods such as Principal Component Analysis, Multidimensional S- caling and RadVis [25] can project multidimensional data onto a 2D plane where data clusters can be more easily identiﬁed using distance measures. Unfortunately, it is difﬁcult for users to understand the se- mantics of the resulting clusters. DICON is designed to leverage the advantages of both traditional scatter plots and dimension reduction al- gorithms to provide more effective cluster interpretation capabilities.
Another problem of scatter plot technique is the unavoidable overlap-s. HeatMaps [6, 9, 11] has been designed to tackle this problem. It uses 2D tables with color-coded cells to identify meaningful correla- tions. Despite their utility in many scenarios, these techniques cannot effectively convey all attributes of multidimensional data. In contrast, DICON is designed speciﬁcally to handle multidimensional clusters.2.3 Icon-based Multivariate VisualizationsIcon or glyph-based designs have been studied for many years. For example, Chernoff faces [5, 35] were proposed in the 1970s and use human facial features to encode multiple data dimensions with a s- ingle icon. Similarly, stick ﬁgure techniques [28] employ relatively simple icon designs where data values are mapped to visual features such as angle, length and thickness. Post et al. [29] proposed 3D icon- ic techniques for feature visualization. Keogh et al. [24] proposed to use colored bitmap to encode time series data.  Other designs like [22, 38], depict individual feature values using colored rectangular cells or pixels. The cells/pixels can then be packed together into an icon using various layout arrangements. These ap- proach are perhaps most similar to the DICON design. However, these existing designs often obscure the semantic of a cluster. DICON in- troduces a design that conveys more cluster information, helping users better understand, compare, and adjust multidimensional clusters.2.4 Interactive Cluster Exploration and AnalysisMany visualization tools leverage the power of rich interactivity to facilitate cluster exploration and analysis. For example, Henry et al. proposed NodeTrix [15] which combines a matrix representation for graphs with traditional node-link graph visualization techniques. Users can select and group nodes to generate an adjacency matrix view to highlight relational patterns. Seo et al. designed HCE [30] for hier- archical multidimensional cluster analysis. Elmqvist et al. developed an interactive scatter plot matrix [10] which leverages animated tran- sitions to smoothly switch between different user selected dimensions. In these systems, interactivity provides an important role in allowing users to perform exploratory visual analysis. DICON follows a simi- lar approach and includes its own powerful interactive capabilities that allow users to compare and reﬁne clusters as they explore their data.3 VISUALIZATION  DESIGNIn this section we ﬁrst present several design guidelines that inﬂuenced our development of the DICON technique. We then provide a detailed description of DICON’s visual encoding methodology. Finally, we introduce a number of interaction features for cluster manipulation.3.1 Design GuidelinesMotivated by the challenges of cluster interpretation, evaluation, and comparison, we identiﬁed a few key design guidelines to follow during the development of DICON.  A cluster’s visual representation should present different levels of granularity. Clusters contain information at several scales, rang- ing from speciﬁc entity data features, to individual entities, to overall clusters. An effective visual representation must convey each of these levels of detail. DICON adheres to this guideline by converting clus- tered data into an entity-feature-cluster hierarchy and using a treemap- based technique to represent them. Connections between features for a single entity are preserved via interactive highlights.  A multidimensional cluster’s representation should employ consistent encodings across entity dimensions and scales. A cluster icon should uniformly apply visual encoding techniques across data dimensions and scales so that users can smoothly navigate across data dimensions and to reduce visual complexity. DICON uses the same encoding technique, based on the size and color of areas, to represent all feature dimensions. This approach is repeated at the cluster level, providing a consistent representation across scales.  Icons for similar clusters should appear visually similar while dissimilar clusters should have icons that are easily distinguish- able. Icons should provide at-a-glance representations that allow user- s to easily determine which clusters are different and which are sim-
Fig. 2. Visual encoding for a patient dataset. In this encoding, an individual entity is described by a feature vector. Each feature in the vector is a numerical value depicted by a small cell. The cells are packed together to generate an individual icon. Individual icons are grouped together by splitting and re-grouping their features into categories.
ilar. This design requirement is critical for both cluster identiﬁcation and comparison tasks. DICON satisﬁes this design guideline by using a novel stable layout algorithm. This algorithm maintains consistent feature locations both within and across icons.  The visual representation should allow users to interactively manipulate clusters for reﬁnement and exploration. Users should be able to select clusters to be merged, select entities to be removed from a cluster, and select individual clusters for subdivision into ﬁner grained sets. All changes in cluster membership should be visually reﬂected in a stable manner to maintain a user’s mental map as much as possible. DICON satisﬁes this guideline by providing a number of interactive cluster reﬁnement features.3.2 Visual EncodingFollowing the design guidelines listed above, we designed DICON, a dynamic icon-based visualization technique which represents cluster- s of multidimensional data as compact glyphs. As multidimensional clusters naturally contain information at multiple scales, we adopt a treemap-like visual encoding scheme. Our icon design, summarized in Fig. 2, uses a combination of spatial size, position, shape and color to convey key cluster properties.  Size Encoding. Generally speaking, an n-dimensional data clus- ter contains a number of entities, each of which is described by a set of features, noted as F = f0 ... fn. For example, Fig. 2(a) depicts an entity from a healthcare dataset which corresponds to a single patient’s medical record. That record contains six features, including severity scores for various co-morbidities such as cancer and diabetes. DICON requires quantitative features and the visual encoding process begins by globally normalizing the range of all features to the interval [0, 1]. This enables the comparison of multiple features regardless of scale. An optional local normalization step is performed on each entity such
Fig. 3. Encoding the normalized kurtosis k using icon shape. The shape of the icon intuitively shows the distributions of underlying data.Fig. 4. Encoding the normalized skew using icon shapes. The ﬁrst two ﬁgures are the icons with different skew values. The third one is an icon generated by combining both kurtosis and skew together.
that the total value of all features equals one (i.e., ∑n
fi = 1). The
feature values are then mapped to color-coded cells whose sizes repre-sent these values. As depicted in Fig. 2(b), the cells are packed togeth- er to form an iconic representation of the entity. A group of entities are further packed as clusters as shown in Fig. 2(d). If performed, the local normalization step produces an icon in Fig. 2(b) with a total area of one unit. This makes cluster icon sizes correspond to the number of items in a cluster, but makes feature value comparison across en- tity sizes difﬁcult.  Thus, color opacity can be used to display actual non-normalized values, or when cluster icon size is less important the optional local normalization can be skipped.  Position and Shape Encoding. When a set of entities are grouped together into a cluster, as illustrated in Fig. 2(c), the entity icons must be combined into a single aggregate iconic representation. We gener- ate a cluster icon by (1) splitting each entity icon into individual feature cells, (2) regrouping the feature cells by feature type, and (3) packing the regrouped cells into a single overall cluster icon. One example is shown in Fig. 2(d) which uses the traditional treemap layout to create a
cluster icon. A more advanced implementation is also proposed. With the help of a stabilized Voronoi layout described in Section 4.1.2, it embeds cluster kurtosis and skewness using an icon’s shape to simu- late the entity distributions within the cluster as illustrated in Fig. 3 and Fig. 4. The width of the icon’s top edge encodes kurtosis (the “Peakness Cue”) while the horizontal position of the peak of the icon encodes skew (the “Asymmetry Cue”).  It should be noted that shape as a preceptive visual property pro- vides high efﬁciency for cluster comparison in multiple scales. For example, Fig. 1(a) clearly shows that all of the depicted state clusters have similar distributions except for Florida, which has greater peak- ness and opposite asymmetry. Unfortunately, the irregular icon shapes can make precise size comparisons more difﬁcult. DICON thus allows users to turn this feature on or off as needed during their analysis.  Color Coding. By default, each cell in a cluster icon is rendered using the color assigned by its corresponding feature. For instance, all

Fig. 5. Color encoding and visual cues in two example clusters: (a) Cluster quality cue; (b) Co-occurrence cue; (c) Domination cue.“cancer” cells in Fig. 2 would be rendered in the same shade of blue. In addition, three other color schemes are provided to convey various visual cues. They are critical for some tasks, but also introduce visual complexity. Thus, we allow users to switch between color schemes.  The ﬁrst scheme uses cell color saturation to convey globally nor- malized feature values to facilitate quantitative comparison over clus- ters in case the cell size encodes the locally normalized values.  Our second scheme is designed to depict cluster quality. Feature variance is selected as the quality measure and encoded by shading as illustrated in Fig. 5(a). Multi-level cushion shading is also used to ease interpretation even for small icons. For a given cell, feature variance is positive if the feature value is larger than the cluster mean and negative if smaller than the mean. Positive and negative variances are depict- ed using rising and sinking shades, respectively. Under this scheme, high quality clusters appear more homogeneous which provides a clear “Cluster Quality Cue”. An “Outlier Cue” is also represented under this scheme. Outliers have large variances from the cluster mean and are visually highlighted with intense and sharp shading.  The ﬁnal color scheme depicts feature co-occurrences to facilitate multidimensional analysis. We deﬁne feature co-occurrence as two features fi and f j that both have a value greater then zero within thesame entity. We deﬁne a co-occurrence score Ci = ∑ j p( f j > 0| fi >0)2 which measures how often a feature fi co-occurs with all other features (p(·) is the conditional probability). The result of this metric is normalized and encoded using color saturation to highlight the mostco-occurred features within the cluster. The resulting color scheme serves as the “Co-occurrence Cue”. As illustrated in Fig. 5(b), many patients are highlighted by dense colors in the bottom cluster because they have both the diabetes (colored in orange) and the kidney disor- ders (colored in blue). In contrast, most of the patient cells in the top cluster are encoded use light colors as most of them merely have the single disease, kidney disorder. Thus, reversing the color, we have the “Dominate Cue” that highlights the features that have not co-occurred with any other features as shown in Fig. 5(c).  Discussions. This design provides a number of key advantages. First, it provides intuitiveness and efﬁciency by leveraging several well established techniques such as a space ﬁlling layout [31] and the use of color saturation to depict data variance and diversity [27]. Second, DI- CON uses color and positions for cluster identiﬁcation which are both high efﬁciency cues as described in [35]. As a result the icons clear- ly depict which clusters are similar to each other while still providing visual cues for more detailed analysis. Third, encoding components such as color and shape can be well scaled without signiﬁcant loss of information as described, respectively, in [20] and [36]. This allows the design to remain effective for both large and small sized icons. In addition, the approach scales to work effectively with large numbers of icons as shown in Fig. 12. Fourth, the icons enable interactive manip- ulation which will be described in the next section. Finally, our design compresses multidimensional cluster information into relatively small cluster icons which can be easily embedded within other visualizations as illustrated in Fig. 1.Yet there are also some constraints on our approach. In particular,
the number of feature dimensions that can be visualized at any one time is limited because each must be represented by a unique user- distinguishable color. To alleviate this problem, feature selection can be used to identify the key features that should be included in a giv- en visualization. Another challenge is that it can be hard for users to obtain precise feature values from our representation because compar- isons of size and color across clusters can be difﬁcult. In addition, the splitting of entities into parts may impede analysis for application- s focusing on entities. However, we believe these limitations are a reasonable trade-off for the beneﬁts of representing multidimension- al cluster information using small, compact icons. We have also in- troduced some interactive features, such as highlights and tooltips, to target some of these concerns.3.3 InteractionsAs expressed in our design guidelines, a key requirement for DICON is that the visualization must allow users to interactively explore and reﬁne the multidimensional clusters. DICON allows users to interac- tively perform the following cluster manipulation actions.  Merge. Users can merge cluster icons in two ways. First, users can drag and drop one icon onto another. Performing this action will merge the two corresponding clusters and create a single new icon to represent the newly created cluster.  Second, users can merge two or more clusters by drawing a lasso around the corresponding icons. DICON will then merge all clusters selected by the lasso. DICON will animate the transition between states during the merging process to clearly illustrate the changes being made.  Split. Given a cluster icon, users can perform several types of s- plit operations. To remove speciﬁc outlier entities, users can simply click on an entity and drag it out of the cluster. Releasing the mouse ﬁnalizes the split. As a result, DICON creates a new icon to represent the split entity and updates the existing cluster icon to reﬂect the split. Users can also perform algorithmic split actions via a pop-up context menu. After right clicking on a cluster, users can choose to perfor- m either a binary split or an outlier split. The binary split operation breaks a cluster into two different sub-clusters. K-means is chosen as an example for the binary split in our implementation. Any other al- gorithms can also be used. The outlier split operation removes the one percent of entities that are farthest from the cluster center  Attribute Grouping. Users can explicitly request that data enti- ties be re-grouped along various data dimensions. This feature allows users to consider non-feature entity attributes. For example, in an elec- tronic medical record use case where diseases are features, patients could be grouped into clusters by non-feature attributes such as age, sex, or location. DICON can handle attribute grouping for categorical, numerical, and temporal attributes.  Filtering. DICON allows users to ﬁlter the set of feature categories used for cluster icon generation. By default, all data attributes selected as features are used to generate cluster icons. For multidimension- al datasets with many such features, users can apply ﬁlters to reduce visual complexity and to focus in on a subset of the feature space.  Highlights.Because our encoding method spatially distributes an entity’s feature cells across the cluster icon, DICON supports entity highlights. When a user’s mouse hovers over a speciﬁc feature cell, all of the corresponding entity’s feature cells are highlighted. A tooltip can also be shown to depict the entity’s key attributes.4 SYSTEM  OVERVIEW  AND  IMPLEMENTATIONThe DICON system’s architecture, shown in Fig. 6, consists of three primary components. First, the preprocessing module extracts key fea- tures of the multidimensional dataset and optionally conducts an ini-tial cluster analysis based on these features to transform raw data into a set of entity records in the form of < id|cid| f1, f2, ..., fn|a1|a2|...|an >, where id is the record id, cid is the cluster id (optional), fi is the ith feature and ai is the ith non-feature attribute. The visualization module ﬁrst generates entity or cluster icons via an icon layout algorithm. It then performs a global layout process to arrange the generated icons within the overall visualization canvas. The user interaction module supports user manipulations of the icons as described in Section 3.3.
  Given a set P = p1,..., pn of sites (initial points), a Voronoi Tessel- lation is a subdivision of the space into n cells, one for each site in P, with the property that a point q lies in the cell corresponding to asite pi iff d(pi, q) < d(pj, q) for i distinct from j (d is a distance met- ric function).  The segments in a Voronoi Tessellation correspond toall points in the plane equidistant to the two nearest sites. Weighted Voronoi diagrams use a weight wi assigned to each point in pi as part of the distance measure. The following additively weighted power dis- tance measure can be used to create Voronoi tessellations with straight line boundaries:
Fig. 6. The overview of the DICON visual analysis system.
d(pi, q)= ||pi − q||2 − w2
(1)
These operations feed back into the preprocessing and visualization modules to enable user-driven data exploration and cluster reﬁnement. In a typical visual analysis process by using the above DICON sys- tem, the users are given a set of data entities or some initial clustering results which are visualized as icons. Their correlations are disclosed by using different globle layouts and several visual cues such as the visual similarity of the icons. The users can iteratively merge, group, split the icons to generate or reﬁne existing clusters until the high qual- ity clusters are found. The whole process is rich in interactions whichare not highly depend on the automatic clustering algorithms.  The entire system was implemented based on DaVinci2 and has been used with both traditional displays and on a touch screen device. In the remainder of this section, we provide details about the icon and global layout algorithms. We also describe DICON’s approach to han- dling animated transitions during cluster manipulation.4.1 Icon ImplementationAs mentioned previously, we adopt a treemap scheme to encode the entity-feature-cluster hierarchy in our icons. Treemap layouts have been heavily studied and many existing techniques can be leveraged. However, traditional layouts cannot satisfy all of our requirements. Therefore, we further develop a stabilized Voronoi-based layout.4.1.1 Traditional Treemap IconsThe traditional treemap [31] is a well established technique used to vi- sualize hierarchical structures. Many algorithms [3, 32, 37] have been proposed to lay out traditional treemaps according to different opti- mization criteria. These algorithms can be directly applied to generate layouts for our icons. The results are quite promising as illustrated in Fig. 5 and the process is very efﬁcient. This makes them suitable for real time icon manipulation.  However, despite its computational efﬁciency, the traditional treemap icon also has some major limitations. First, the layout for rectangular treemaps may not be stable during the cluster reﬁnement process. After users add or remove some entities to/from the cluster icon, the positions of cells may be shufﬂed and the layout may change dramatically. Second, there is no guarantee that similar icons will be generated for similar clusters. Traditional layout algorithms only do optimization within a single treemap. For multiple cluster icons, more constraints are needed to guarantee that the same features in different clusters are positioned in similar locations. Third, traditional treemap- s produce rectangular icons which cannot be shaped to embed global cluster statistics as described in Section 3.2. These limitations make traditional treemaps inefﬁcient for cluster comparison, and global s- tatistic embedding.4.1.2 Voronoi IconsTo overcome the limitations of traditional treemaps, we introduce a new Voronoi icon layout that satisﬁes all of DICON’s design princi- ples. Our algorithm embeds statistical information into the icon shapes and also introduces a stability factor while leveraging the centroidal Voronoi tessellation [7] and weighted Voronoi diagrams that are also used by Balzer et al. [2]. Before describing our algorithm in detail, we brieﬂy review weighted and centroidal Voronoi tessellation.2Website:    http://sourceforge.net/projects/davinci-vis/
Intuitively, one can consider the weighted Voronoi diagram as using using circles as sites instead of points where the circles’ radii are a function of the corresponding weight wi.  A Voronoi tessellation is called centroidal when all of the tessella- tion’s sites are located at the center of mass for their respective regions. It can be viewed as an optimal partition corresponding to an optimal distribution of sites. A number of algorithms can be used to generate centroidal Voronoi tessellations, including Lloyd’s algorithm and the K-means algorithm (see [7]). Recently, Balzer et al. introduced an optimization algorithm for weighted centroidal Voronoi tessellation to generate Voronoi treemaps [2]. We further extend Balzer’s algorithm by introducing a stabilized centroid.  Statistic Embedding. To strengthen the visual design, our lay- out method ﬁrst embeds statistical measures into an icon’s bounding shape before applying the stabilized Voronoi layout. Generally speak-ing, two standard moments, the skewness (γ = μ3/σ 3) and the kurtosis (κ = μ4/σ 4 − 3), are embedded into cluster icons via an icon’s overall shape that facilities analysis. In the layout, we use a ladder shape tosimulate the underlying data distribution as illustrated in Fig. 3 and Fig. 4. The height and the top width of the ladder are deﬁned, respec- tively, by the following functions:           kl(k)= 2(α · k + 1) · r, kll(k)= −2r · k + 2r	(2)where k is the kurtosis, r is the original radii of the icon and α ∈ [0, 1] is a factor that controls the sharpness of the ladder. The width of the bottom end is automatically adjusted to keep the icon size proportional to the number of its containing entities. The cluster skewness is furtherused to adjust the position of the top vertex of the triangle to intuitively represent the data’s asymmetry.  Stabilized Voronoi Icon Layout. Voronoi tessellation is comput- ed within each shaped icon. We provide a stabilized Voronoi-based icon layout algorithm which maintains the stability of Voronoi regions when cluster changes occur and maintains a predeﬁned order for sites within an icon. It places Voronoi regions next to each other according to their semantic similarities. In the layout process, we ﬁrst arrange the feature types in an order that is followed in all cluster icons. For example, we can order the feature types according to their importance or follow a predeﬁned order with certain semantics.  We maintain this site order during layout by carefully controlling the initial positions of their corresponding sites. Different strategies are used for different icon shapes.  For example, for circular icon- s we initially layout the sites on a spiral line centered at and within the boundary circle. For rectangular icons, the sites are laid out line by line from left to right in order. A weighted CVT optimization is then performed which assigns a weight to each site based on the cor- responding value and adjusts their positions and weights to obtain a proper tessellation.  The individual entity features are laid out inside the regions for each feature type by carefully controlling the positions and movements of their corresponding sites S = s1,..., sn during the CVT iteration. In- tuitively, in each iteration, we move a site si towards to its region vi’s center of mass ci  while trying to balance two other constraints. First, we aim to position all similar sites as close as possible to each other while positioning dissimilar sites far apart (the screen distance|Xi − Xj | is close to their semantic distance dij with a proper scaling
Algorithm 1: VoronoiIconLayout()Data: S(si,...sn), V , ε, pre(s1), ..., pre(sn) Result: coordinates of each site X (X1, X2,..., Xn) beginif pre(S) is not empty theni  = pre(si);
else
i = random locations within V ;
stressl = 10000 //give a very large value;while ratio > ε do//the coordinate update based on stress majorization;ω  (x +d  (xl−xl )inv(||X l−X l ||))
Fig. 7. Transition path bundling while splitting C0 into C1 and C2. The transition paths of feature cells are bundled based on their hierarchical cluster centers to reduce visual clutter during animation.
Xi = ∑i< j    ij     j
ij     i       j	i	j
∑i< j wij	;compute Voronoi tessellation vi according to Xi; compute ci according to vi;Xi = μ1 · (Xi − ci)+ μ2 · Xi + μ3 · (Xi − pre(si));wi = wi · (1 + (desiredi − ai)/desiredi);//adjust weightif wi < 1 thenwi = 1r = min{|Xi − Xj  2/(wi + wj )};if r < 1 thenwi = wi · rstr1 = ∑i |Xi − ci|2; str2 = ∑i |Xi − pre(Xi)|2; str3 = ∑i< j (|Xi − Xj |− dij )2;stress = ∑k (μk · strk );ratio = (stressl − stress)/stressl;μk = μk · (1 + (stress − strk )/stress); normalize μk ;Xi = Xi;stressl = stress;factor). Second, as entities are added or removed from a cluster, we strive to maintain icon stability by minimizing any changes in location from a site’s previous optimal position pre(si). Formally, we capture these constraints in a layout model which tries to minimize follow the objective function:μ1 ∑|Xi − ci|2 + μ2 ∑(ωij |Xi − Xj |− dij )2 + μ3 ∑|Xi − pre(Xi) 2
4.1.3 DiscussionsThe VoronoiIconLayout() algorithm satisﬁes all of the design princi- ples outlined earlier in this paper. It has a time complexity of O(n2) for each iteration which is the same as Balzer’s algorithm but worse than Lloyd’s CVT algorithm (O(nlog(n))). Some acceleration tech- niques such as Sud et al. [33] and Gotz et al. [14] are available but itstill remains a challenging task to layout Voronoi treemaps for large datasets in real time. To have the beneﬁts of both real time interaction and high-quality layouts, DICON supports both rectangular treemap icons as well as the optimized Voronoi icons. The ﬁrst are used to sup- port real time exploratory interactions. Because of its efﬁciency, users can group any set of entities and clusters to generate new icons in real time. Switching to the Voronoi view helps users better understand and compare the clustering results.4.2 Global LayoutAfter the icon layout process completes, a global layout algorithm is used to position the icons and uncover their correlations. Various layout algorithms can be used for different purposes as illustrated in Fig. 1. For example, when icons are used to represent geographical clusters, they can be globally laid out based on their locations as shown in Fig. 1(a). DICON icons can also be used in conjunction with scatter plots to uncover the correlations among various dimensions as shown in Fig. 1(b). We can also apply our technique to a multi-relational graph visualization shown in Fig. 1(c) to reveal both patient communi- ties and their relationships. The communities are generated according to patient similarities over multiple diagnoses and represented using
i	i< j
i(3)
DICON icons. The link colors and thicknesses encode different types
where Xi is the coordinate of si.  ci(cx, cy) is the mass center of the region vi which can be computed by following equations:1  N−1cx = 6A  ∑ (xi + xi+1)(xiyi+1 − xi+1yi)
of relations and their strengths, respectively. The layout of the iconsin the graph can be computed using a force-directed model.  Beyond these applications which embed the icons within another visualization, DICON also provides a MDS-based projection to layout cluster icons based on their similarity.  A fast overlap removal algo-
i=01  N−1cy =	∑ (yi + yi+1)(xiyi+1 − xi+1yi)i=0
(4)
rithm [8] is adopted to avoid overlapping icons.  It eliminates over-laps while retaining each icon’s original position as much as possible. Some improvements were made to these algorithms to facilitate inter- active cluster manipulations. First, we minimize icon movement when clusters change by smoothing positional changes based on the icons’
where A is the area of vi, and (xi, yi) is the ith vertex of polygon vi.  In the layout objective function (3), dij is the semantic distance between two features fi and f j . It is deﬁned by their corresponding feature vectors fi ∈ Fi and f j ∈ Fj as (1 − cos(Fi, Fj )) in our imple-mentation.  The weights μk (∑k μk = 1 and 0 < μk < 1) balance thethree parts of our layout model. They are changed adaptively duringeach CVT iteration using several heuristic strategies. Intuitively, we always keep μ1 larger than the other two weights since we want the iteration to stop at a position where si at or close to its mass center ci. Then we compute the errors of each part in the formula and in- crease the weight of the part that has the largest error and decrease the weight of the part that has smallest error. In this way, the part with largest error is the focus for minimization during the next iteration. Our proposed algorithm is speciﬁed in Algorithm 1. It leverages the stress majorization [13] technique to provide a local minimization of the model.
previous positions. Second, an incremental layout technique is used for split and merge commands. For example, when entities are split off from a cluster, only modiﬁed clusters (including any newly created clusters) are re-laid out in a sub-area followed by a global overlap re- moval. Thus, the positions for far away cluster icons are not affected.4.3 Animated TransitionsWhen a cluster manipulation interaction such as attribute grouping or merging is applied, the icons may be reorganized and re-laid out to generate a new presentation of the data. In our system, this changing process is smoothly conveyed using a multi-step animated transition. First, feature cells for entities that change clusters are split from their original icon. Second, all of the feature cells are moved to their new location and their shapes are changed accordingly. Finally, the feature cells are repacked together under a new organization. During the sec- ond step, a naive approach to moving feature cells can create complex
Fig. 8. Visualizations of the cars dataset using (a) scatter plot matrices with dimension reordering [10], (b) parallel coordinates with edge clus- tering [40], (c) DICON using square-shaped Voronoi-based icons, and(d) DICON using icon shapes to encode statistical cluster measures.visual movements that are often confusing and hard to follow.  To overcome this problem, we use a transition path bundling tech- nique. It aggregates the feature cells for each cluster into transition groups according to their movement trends. Each trend is deﬁned us- ing a polyline that describes the overall direction of movement. All the transition paths in a group are bundled together using a B-spline based on the control points of their associated trends. This spline guides the animation path. We compute the trends by using the innate hierarchy of our icon design. This algorithm is inspired by edge bundling [16].  To illustrate our algorithm, we consider a sample split interaction. Suppose a cluster C0 is to be split into two smaller clusters C1 and C2 as shown in Fig. 7(a). Feature cell f1, along with other feature cells fi, will be split from C0  and packed into a new icon for cluster C1. Similarly, the remaining feature cells from C0 will move to cluster C2. The trend for feature f1 is then deﬁned as a polyline that connects the centers of f1’s feature type region in the C0 icon, the C0 icon, the C1 icon, and its corresponding feature type region in C1. The transition curves deﬁned by the features’ polyline trends are used to smoothly animate the feature cells as shown in Fig. 7(b).5 APPLICATIONSThis section presents examples of how DICON can be used to analyze multidimensional data. We discuss use cases for two different datasets.5.1 Visualization of the Cars DatasetWe applied DICON to a cars dataset which has also been used to eval- uate both parallel coordinates (PCP) and scatter plot matrices (SPM) (see Fig. 8(a) and (b)). The cars dataset contains 407 cars described by 7 different dimensions from which we selected 5 quantitative di- mensions as features. The two remaining dimensions, year and ori- gin, were used as additional attributes. The visualization results are illustrated in Fig. 8(c). Compared with PCP and SPM, our technique compresses the multidimensional information into a small number of compact cluster icons which require very little space for display. DI- CON immediately conveys the size of each cluster which is usual- ly hidden in both PCP and SPM. For example, the number of cars produced by Americans is about 3 or 4 times larger than the num- ber of cars produced by European or Japanese manufacturers. From
Fig. 9. Exploration of patient similarities with DICON: (a) Low quality in the initial ﬁve clusters generated by grouping the patient icons based on their visual similarity; (b) 21 user identiﬁed clusters in the co-occurrence view after reﬁning the clusters, which can be roughly separated into ﬁve regions by their positions and visual similarities.Fig. 8(c), we can easily see that the European cars and Japanese cars have similar features. However the statistical distributions are differ- ent as shown in Fig. 8(d). American cars, when compared to Euro- pean and Japanese models, usually have a larger weight (depicted in yellow), larger displacement (depicted in purple), more cylinders (de- picted in blue), somewhat reduced acceleration (depict in cyan), much greater horsepower (depicted in red), and much fewer miles-per-gallon (depict in orange). We believe that doing a similar multidimensional comparison is relatively difﬁcult with PCP and SPM techniques be- cause line crossings and data overlaps are unavoidable in both of these alternative visualizations.5.2 Case Study in the Healthcare DomainWe also applied DICON within the healthcare domain to visualize a dataset containing more than 10,000 patient records. The data includes claims, labs, pharmacy, and patient proﬁle information. To augmen- t this data, we applied a patient similarity algorithm to compute pa- tient similarity scores across multiple dimensions (e.g., diagnoses, lab results, etc.). We also indexed the patient records to make the data searchable. We then invited two physicians to participate in a case s- tudy. Both physicians were required to complete two exploratory tasks that were motivated by real use cases proposed by domain experts. The tasks were as follows: (1) given a patient with a challenging disease, ﬁnd the records of similar patients to serve as reference points during diagnosis; and (2) ﬁnd the most prominent diseases over different age groups, geographic locations, and sex for a given a set of patient data.5.2.1 Patient Similarity TaskIn this task, we selected the similarity scores with respect to diagnosis, labs, proﬁles, NDC, and CPT as the features of each patient. Our user- s started with a query using a target patient and the system returned a large set of similar patients that were represented as icons and laid out based on the MDS projection. The users were required (a) to identi- fy several patient clusters, (b) to reﬁne their quality according to the data and cluster correlations, and (c) to answer how similar they are to the target query. At the beginning, the users grouped the patients according to their visual similarity and relative positions. This initial grouping generated clusters with low quality as shown in Fig. 9(a). The follow-up binary split and outlier split operations were used to quickly reﬁne the clusters at a rough granularity. Then a series of more precise split and merge interactions moving small numbers of patients were conducted to ﬁne tune the clusters according to both i- cons’ screen potions and visual similarities. After several iterations of cluster adjustment, they ﬁnally found 21 meaningful and homoge- neous clusters. When the users switched to the co-occurrence view (see Fig. 9(b)), they found that the patient clusters are roughly separat- ed into 5 parts as annotated by the dashlines. The clusters in region C1 shared similar diagnoses with the target patient; the clusters in region C4 were similar to the target patient both in labs and diagnoses. This approach also helped to detect several non-medically-relevant clusters in C2. They were similarly to the target patient mainly by proﬁles.
Fig. 10. DICON showing clusters of patients grouped by age. Here color depicts the co-occurrence cue to highlight the degree of disease co-occurrence within each age group.Fig. 11. The synthetic data used in user study task 1. Nine cluster icons are arranged using MDS projection. Icon types are evaluated using (a) random order packing, (b) ordered packing following the DICON design guidelines, and (c) ordered packing combined with icon shapes.5.2.2 Study on Disease DistributionsIn this task, we selected the severity of various diseases as the fea- tures to visualize with DICON. Our users found the requested dis- ease distributions by using attribute grouping to cluster the patients on non-feature data attributes. For example, they grouped patients based on location and combined the icons with a map as illustrated in Fig.1(a). This clearly depicted the disease distributions for different states. When grouping patients by age, several disease co-occurrence over different age groups were found in the dataset. As illustrated in Fig. 10, “diabetes” was co-occurred with “kidney disorder” in patients aged from 62 to 83. In the oldest patient group, these two diseases were also co-related with “dementia”. Similar groupings were also conducted by our users on other attributes such as race and sex.6 USER STUDY AND INTERVIEWSTo evaluate DICON’s ability to facilitate cluster interpretation and comparison for a large dataset, we conducted a controlled user s- tudy. The study included 30 participants (24 males, 6 females) all of whom were either graduate or undergraduate students. Participant ages ranged from 19 to 30. We also interviewed domain experts.6.1 Study SetupIn order to conduct controlled experiments, we generated two synthet- ic datasets since the study contained too many parameters such as the skewness, the kurtosis and the number of clusters. The datasets were generated based on the multinomial distribution that made our synthet- ic datasets close to real datasets. The ﬁrst dataset contained 9 clusters and 300 entities and was visualized using MDS layout as shown in Fig. 11. The second dataset contained 50 clusters and 1000 entities (see Fig. 12). With these datasets, we had users perform the following tasks: (T1) identify the two most similar clusters in Fig. 11 and deter- mine which features made them similar; (T2) identify groups of similar clusters from the large set of icons in Fig. 12. We provided multiple answers as choices for both T1 and T2 and also allowed users to write down their own answers. Both of them evaluates the cluster compar- ison which is the most important feature of DICON. The ﬁrst task evaluated DICON’s support for distinguishing between clusters. The second task evaluated DICON’s effectiveness for comparisons over a
Fig. 12. The synthetic dataset with 50 clusters used in user study task2. Icons generated by (a) random order packing, (b) DICON’s ordered packing, and (c) ordered packing combined with icon shapes.large set of clusters. We selected Voronoi icons for our study because it satisﬁed all our design guidelines. For both tasks, we compared user performance among three different Voronoi icon types: type 1 icons had feature types packed in a random order; type 2 icons obeyed all design guidelines including consistent ordering; type 3 icons were the same as type 2 but added shapes to encode data distributions.  Before the study, users were given a 10 minute introduction to the icon design. Users were then allowed to try DICON for themselves to explore the patient dataset. Users were encouraged to group and regroup clusters, and to view different statistic measures for the results. This introduction was followed by a brief interview session to gather initial feedback. Users then performed the formal study tasks. We conducted a between subject study in which we separated the users into three groups of 10. Group A used type 1 icons, group B used type 2 icons, and group C used type 3 icons. All users were required to answer the questions as accurately as possible. Their response time and task success rate were recorded. Finally a questionnaire survey on system usability was conducted.6.2 Study Results and AnalysisThe study results are summarized in Fig. 13. The beneﬁts of the pro- posed design principles were evident in both the task response time and the task success rate. A two-way repeated measures ANOVA anal- ysis showed that when compared with the random type 1 icon, both type 2 and type 3 icons had signiﬁcant improvements in response time for both T1 (type 2: 0.0002 < .05; type 3: 0.0001 < .05) and T2 (type2: 0.017 < .05; type 3: 0.024 < .05). The response time using type
Fig. 13. User study results including (a) task response time, (b) task success rate, and (c) subjective feedback on “ease of use” and “usefulness”.
2 and type 3 icons are similar in both tasks. In T1, the response time of type 3 icons was slightly better than that of type 2 icons, while for T2 the result was reversed. The task success rate of T1 also had sig- niﬁcant improvements when compared with the baseline type 1 icons (0.004 < .05 of both type 2 and 3). There was no difference on task success rate between the type 2 icons and the type 3 icons on T1. We found the success rate of T2 was the same (90%) for all icon types.  The study results veriﬁed the efﬁciency of our design principles. They showed that a well organized multidimensional cluster icon vi- sualization provided high efﬁciency on cluster comparison and inter- pretation. In addition, they showed no negative impact of using shape to encode additional cluster statistics in type 3 icons. Moreover, even when visualizing a large number of clusters, the type 2 and 3 icons remained highly efﬁcient. It took an average of only 12.86 seconds to compare 50 multidimensional clusters with a task success rate of 90%. This was a surprising ﬁnding which would be difﬁcult to achieve using PCP techniques according to Holten et al.’s study result [17]: when the number of clusters are over ﬁve (far fewer than the 50 in our study), the ability to identify clusters with PCP is dramatically decreased.  Furthermore, we found that the guidelines for generating similar icons for similar clusters plays a very important role in making a pre- cise comparison as required in T1. Several of the users were confused when using type 1 icons to make the comparison. After the study, many of them said that they gave the answers mainly by guessing. The correctness is thus far worse than the results observed when using icon types 2 or 3.  In addition to the quantitative results, we collected qualitative user feedback on the key features of the DICON system (visual compari- son, interpretation and interactive cluster manipulation) by consider- ing “ease of use” and “usefulness”. As illustrated in Fig. 13(c), all of the features had a high average score over four (ﬁve is the highest score). The cluster comparison capability was rated as the most useful feature and interactive cluster manipulation was considered the easi- est feature by the study participants. Interpretation was rated slightly lower when compared with other two features. We believe that this is because it is a feature based on comparison and requires additional effort to understand the meaning of the feature categories and clusters.6.3 Interviews with Domain ExpertsUsing the patient dataset described previously, we conducted extended one-on-one interviews with two medical doctors with very strong do- main expertise. The ﬁrst doctor is a former emergency physician with over 30 years of hospital-based experience. He has published multiple articles and book chapters on both clinical and management subjects. The second doctor is a health care and biotechnology executive who has, in addition to clinical experience, more than 30 years of expertise in sophisticated managed care organizations, strategic planning, and operations management.  Both physicians were intrigued by the interactive visualization that DICON provides for examining and manipulating similar patient co- horts. The physicians were attracted to the interactivity and felt that the iconic representations provided signiﬁcant value. At ﬁrst, one physi- cian remarked that the icon was more “complex” than he was used to (e.g., bar charts). However, after brief demonstrations of the tool the representation became clear.
  Referring to DICON’s reﬁnement capabilities, one physician said “it provides an interesting way to deﬁne cohorts.” He was especially interested in the drag-and-drop nature of the technique which he felt provided a “very intuitive interface” for manipulating sets. He very much liked the icon design which provided a concrete object for him to analyze and manipulate. When referring to the interactive reﬁne- ment of cohorts, one physician stated that “as a medical director, this is exactly what I would want to do.” The icon design let him “do it rapidly [via] drag and drop” instead of “giving it to a programmer” to generate a new report. One physician commented that the ability to overlay statistical measures of quality onto the visualization was very useful. When asked if that helped him gauge the quality of clusters, he responded “absolutely.”  In addition to commenting on DICON’s current functionality, the participants also made a number of suggestions for future improve- ments. For example, the physician wanted the ability to perform at- tribute grouping for combinations of dimensions (e.g., both sex and age). This is a feature that we hope to introduce in future revisions of the tool. A more complicated request made by one physician was the ability to drag the icon for a cohort from our tool onto icons for other system functionality. His suggestion was to use this approach to issue requests for additional analytics to be applied to a given group of pa- tients. The user’s request for this feature shows that the tangible icons we designed for representing cohorts form a very powerful represen- tation in the minds of our users. The icon itself becomes the object that the user wishes to operate on. We believe this is a very powerful design approach and we are exploring ways to adopt it.7 CONCLUSION AND FUTURE WORKIn this paper, we presented DICON, an interactive icon-based mul- tidimensional cluster visualization. It provides a novel approach to visual cluster comparison, interpretation and adjustment. Compared with traditional visualization techniques, DICON encodes addition- al derived statistical information that provides visual cues to facili- tate cluster evaluation and adjustment. DICON also scales well to ef- fectively support large numbers of clusters. DICON’s design follows several predeﬁned guidelines and leveraging several well established designs. Strong information scent and visual cues for cluster quality evaluation, interactive adjustment and exploration are provided by this design. Interactions are further supported for cluster manipulation. Fi- nally, new layout algorithms as well as animated transition techniques were introduced to satisfy DICON’s design requirements. Our eval- uation, including a case study, user study and feedback from domain experts, demonstrates the effectiveness of DICON. Future work in- cludes performing additional user studies to evaluate other aspects of the design and proposing new layout algorithms and features.ACKNOWLEDGMENTSWe thank all the user study participants and doctors for their contri- butions to the system evaluation, Dr. Tim Dwyer for his help on the node overlap removing and the anonymous reviewers for their valu- able comments. This work was supported in part by grant HK RGC GRF 619309 and an IBM Faculty Award.

REFERENCES[1] M. Ankerst, S. Berchtold, and D. Keim. Similarity clustering of dimen- sions for an enhanced visualization of multidimensional data. In IEEE Symposium on Information Visualization, pages 52–60, 1998.[2] M. Balzer and O. Deussen. Voronoi treemaps. In IEEE Symposium on Information Visualization, pages 49–56, 2005.[3] M. Bruls, K. Huizing, and J. Van Wijk. Squariﬁed treemaps. In Proceed- ings of the joint Eurographics and IEEE Symposium on Visualization, pages 33–42, 2000.[4] D. Carr, R. Littleﬁeld, W. Nicholson, and J. Littleﬁeld. Scatterplot matrix techniques for large N. Journal of the American Statistical Association, 82(398):424–436, 1987.[5] H. Chernoff. The use of faces to represent points in k-dimensional space graphically. Journal of the American Statistical Association, 68(342):361–368, 1973.[6] S. Climer and W. Zhang. Rearrangement clustering: pitfalls, remedies, and applications. Journal of Machine Learning Research, 7:919–943, 2006.[7] Q. Du, V. Faber, and M. Gunzburger. Centroidal voronoi tessellations: applications and algorithms. SIAM review, 41(4):637–676, 1999.[8]  T. Dwyer, K. Marriott, and P. Stuckey.  Fast node overlap removal.  InGraph Drawing, pages 153–164, 2006.[9] M. Eisen, P. Spellman, P. Brown, and D. Botstein. Cluster analysis and display of genome-wide expression patterns. In Proceedings of the National Academy of Sciences of the United States of America, pages 14863–14868, 1998.[10] N. Elmqvist, P. Dragicevic, and J. Fekete. Rolling the dice: multidi- mensional visual exploration using scatterplot matrix navigation. IEEE Transactions on Visualization and Computer Graphics, 14(6):1141– 1148, 2008.[11] M. Friendly. Corrgrams. The American Statistician, 56(4):316–324, 2002.[12] Y. Fua, M. Ward, and E. Rundensteiner. Hierarchical parallel coordinates for exploration of large datasets. In Proceedings of IEEE Conference on Visualization, pages 43–508, 1999.[13] E. Gansner, Y. Koren, and S. North. Graph drawing by stress majoriza- tion. In Graph Drawing, pages 239–250, 2005.[14] D. Gotz. Dynamic voronoi treemaps: a visualization technique for time- varying hierarchical data. Technical Report RC25132, IBM, 2011.[15] N. Henry, J.-D. Fekete, and M. J. McGufﬁn. Nodetrix: a hybrid visu- alization of social networks. IEEE Transactions on Visualization and Computer Graphics, 13(6):1302–1309, 2007.[16]  D. Holten. Hierarchical edge bundles: visualization of adjacency relation- s in hierarchical data. IEEE Transactions on Visualization and Computer Graphics, 12(5):741–748, 2006.[17] D. Holten and J. Van Wijk. Evaluation of cluster identiﬁcation perfor- mance for different PCP variants. Computer Graphics Forum, 29(3):793– 802, 2010.[18] A. Inselberg and B. Dimsdale. Parallel coordinates: a tool for visualiz- ing multi-dimensional geometry. In Proceedings of IEEE conference on Visualization, pages 361–378, 1990.[19] S. Johansson and J. Johansson. Interactive dimensionality reduction through user-deﬁned combinations of quality metrics. IEEE Transactions on Visualization and Computer Graphics, 15(6):993–1000, 2009.[20] D. Keim. Designing pixel-oriented visualization techniques: theory and applications. IEEE Transactions on Visualization and Computer Graph- ics, 6(1):59–78, 2000.[21] D. Keim. Information visualization and visual data mining. IEEE Trans- actions on Visualization and Computer Graphics, 8(1):1–8, 2002.[22] D. Keim and H. Kriegel. VisDB: database exploration using multidi- mensional visualization. IEEE Computer Graphics and Applications, 14(5):40–49, 2002.[23] D. Keim and H. Kriegel. Visualization techniques for mining large databases: a comparison. IEEE Transactions on Knowledge and Data Engineering, 8(6):923–938, 2002.[24] E. Keogh, L. Wei, X. Xi, S. Lonardi, J. Shieh, and S. Sirowy. Intelligent icons: integrating lite-weight data mining and visualization into gui op- erating systems. In Proceedings of the International Conference on Data Mining, pages 912–916, 2006.[25]  L. Nova´kova´ and O. Sˇ tepa´nkova´.  Multidimensional clusters in RadViz.In Proceedings of WSEAS International Conference on Simulation, Mod- elling and Optimization, pages 470–475, 2006.
[26] M. Novotny. Visually effective information visualization of large data. In Proceedings of the Central European Seminar on Computer Graphics, pages 41–48, 2004.[27] T. Pham, R. Hess, C. Ju, E. Zhang, and R. Metoyer. Visualization of di- versity in large multivariate data sets. IEEE Transactions on Visualization and Computer Graphics, 16(6):1053–1062, 2010.[28] R. Pickett and G. Grinstein. Iconographic displays for visualizing multi- dimensional data. In Proceedings of the IEEE International Conference on Systems, Man, and Cybernetics, pages 514–519, 1988.[29] F. Post, T. van Walsum, F. Post, and D. Silver. Iconic techniques for fea- ture visualization. In Proceedings of IEEE Conference on Visualization, pages 288–295, 1995.[30] J. Seo and B. Shneiderman. Interactively exploring hierarchical clustering results. IEEE Computer, 35:80–86, 2002.[31] B. Shneiderman. Tree visualization with treemaps: 2d space-ﬁlling ap- proach. ACM Transactions on Graphics, 11(1):92–99, 1992.[32] B. Shneiderman and M. Wattenberg. Ordered treemap layouts. In IEEE Symposium on Information Visualization, pages 73–80, 2001.[33] A. Sud, D. Fisher, and H. Lee. Fast dynamic voronoi treemaps. In IEEE International Symposium on Voronoi Diagrams in Science and Engineer- ing, pages 85–94, 2010.[34]  A. Tatu, G. Albuquerque, M. Eisemann, J. Schneidewind, H. Theisel,M. Magnork, and D. Keim. Combining automated analysis and visual- ization techniques for effective exploration of high-dimensional data. In IEEE Symposium on Visual Analytics Science and Technology, pages 59– 66, 2009.[35]  E. Tufte and G. Howard. The visual display of quantitative information.1983.[36]  C. Ware. Information visualization: perception for design. 2004.[37] J. Wood and J. Dykes. Spatially ordered treemaps. IEEE Transactions on Visualization and Computer Graphics, 14(6):1348–1355, 2008.[38] J. Yang, D. Hubball, M. Ward, E. Rundensteiner, and W. Ribarsky. Val- ue and relation display: interactive visual exploration of large data sets with hundreds of dimensions. IEEE Transactions on Visualization and Computer Graphics, 13(3):494–507, 2007.[39] X. Yuan, P. Guo, H. Xiao, H. Zhou, and H. Qu. Scattering points in parallel coordinates. IEEE Transactions on Visualization and Computer Graphics, 15(6):1001–1008, 2009.[40] H. Zhou, X. Yuan, H. Qu, W. Cui, and B. Chen. Visual clustering in parallel coordinates. Computer Graphics Forum, 27(3):1047–1054, 2008.